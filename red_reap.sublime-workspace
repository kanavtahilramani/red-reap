{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"com",
				"commentData"
			],
			[
				"comm",
				"comments"
			],
			[
				"Comm",
				"CommentSchema"
			],
			[
				"comment",
				"commentSlice"
			],
			[
				"par",
				"parseInt"
			],
			[
				"sub",
				"submission"
			],
			[
				"perm",
				"permalink"
			],
			[
				"get",
				"getTopSubmission"
			],
			[
				"comments",
				"comments"
			],
			[
				"hand",
				"handleTopComment"
			],
			[
				"save",
				"saveUser"
			],
			[
				"ref",
				"refreshToken"
			],
			[
				"user",
				"userData"
			],
			[
				"User",
				"UserSchema"
			],
			[
				"top",
				"topComment"
			],
			[
				"Token",
				"TokenSchema"
			],
			[
				"refr",
				"refreshToken"
			],
			[
				"url",
				"urlParams"
			],
			[
				"control",
				"controllerAs"
			],
			[
				"contr",
				"controllerAs"
			],
			[
				"contro",
				"controller"
			],
			[
				"logg",
				"loggedIn"
			],
			[
				"set",
				"setToken"
			],
			[
				"is",
				"isLoggedIn"
			],
			[
				"Auth",
				"AuthToken"
			],
			[
				"auth",
				"authFactory"
			],
			[
				"local",
				"localStorage"
			],
			[
				"expires",
				"expiresInMinutes"
			],
			[
				"secret",
				"secretCode"
			],
			[
				"route",
				"routeProvider"
			],
			[
				"padding",
				"padding-top"
			],
			[
				"find",
				"findById"
			],
			[
				"api",
				"apiRouter"
			],
			[
				"body",
				"bodyParser"
			],
			[
				"admin",
				"adminRouter"
			],
			[
				"alfa",
				"alfaPartyNames"
			],
			[
				"pla",
				"planeID"
			],
			[
				"num",
				"numParties"
			],
			[
				"or",
				"originalBravoSize"
			],
			[
				"alf",
				"alfaSize"
			],
			[
				"bravo",
				"bravoSize"
			],
			[
				"loun",
				"loungeSize"
			],
			[
				"brav",
				"bravoSize"
			],
			[
				"bra",
				"bravoPartySizes"
			],
			[
				"ori",
				"originalBravoSize"
			],
			[
				"lounge",
				"loungePartyNames"
			],
			[
				"part",
				"partySize"
			],
			[
				"to",
				"toFly"
			],
			[
				"orig",
				"originalBravoSize"
			],
			[
				"pass",
				"passengersBravo"
			],
			[
				"print",
				"printPassengerList"
			],
			[
				"al",
				"alfaPlane"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "'use strict';\n\n// import Reddit from './reddit.model';\nimport creds from '../../config/local.env';\nimport Token from '../validate/validate.model';\nimport User from '../user/user.model';\nimport Snoocore from 'snoocore';\n\nfunction getRefresh() {\n  return Token.findOne();\n}\n\nfunction findUser(username) {\n  // console.log(\"\\n\\n===============================\\n\\n\" + User.findOne({ 'username': username}) + \"\\n\\n==============================\\n\\n\");\n  return User.findOne({ 'username': username});\n}\n\nfunction saveUser(user) {\n  user.save(function (err) {\n    if (err)\n      console.log(err);\n\n    user.save();\n    // callback();\n  });\n}\n\nfunction createUser(req, res) {\n    var userData = new User({username: req.params.username});\n\n    getTopComment(req, res, function(comment) {\n      userData.topComment.body = comment.body;\n      userData.topComment.score = comment.score;\n      userData.topComment.subreddit = comment.subreddit;\n\n      getKarmaAndDate(req, res, function(scores) {\n        userData.commentKarma = scores.comments;\n        userData.linkKarma = scores.submissions;\n        userData.creationDate = scores.created;\n\n        getTopSubmission(req, res, function(submission) {\n          userData.topSubmission.score = submission.score;\n          userData.topSubmission.subreddit = submission.subreddit;\n          userData.topSubmission.title = submission.title;\n          userData.topSubmission.permalink = submission.permalink;\n\n          getUserComments(req, res, function(allComments) {\n            allComments.forEach(function(commentSlice) {\n\n              commentSlice.data.children.forEach(function(currentComment) {\n                console.log(\"\\n\\n====================\\n\\n\" + currentComment.data.body + \"\\n\\n====================\\n\\n\");\n                // userData.comments.push({\n                //                     score: currentComment.data.score,\n                //                     nsfw: currentComment.data.over_18,\n                //                     body: currentComment.data.body,\n                //                     edited: currentComment.data.edited,\n                //                     subreddit: currentComment.data.subreddit,\n                //                     created: currentComment.data.created_utc,\n                //                     upvotes: currentComment.data.ups\n                //                     });\n               // userData.comments.push({new Comment});\n               userData.update(\n                            { $push: {comments.body}}\n               )\n               // userData.comments[0].body = currentComment.data.body;\n               // console.log(\"\\n\\n====================\\n\\n\" + currentComment.data.body + \"\\n\\n====================\\n\\n\");\n               // userData.comments.push({com: currentComment.data.body});\n\n              });\n            });\n            saveUser(userData);\n          }); // end getUserComments       \n        });\n      });\n    });\n}\n\nfunction updateUser(req, res) {\n\n}\n\nvar reddit = new Snoocore({\n    userAgent: 'web:red-reap:0.0.1 by (/u/ferristic)',\n    throttle: 0,\n    oauth: {\n        type: 'explicit',\n        duration: 'permanent',\n        key: creds.client_id,\n        secret: creds.redsecret,\n        redirectUri: 'http://localhost:9000/api/validate/redirect',\n        scope: [ 'identity', 'read', 'history', 'flair' ]\n    }\n  });\n\n  getRefresh().then(function(data) {\n    reddit.setRefreshToken(data.refresh.toString());\n  });\n\n// '/api/reddit/:username/'\nexport function checkUser (req, res) {\n  findUser(req.params.username).then(function(userData) {\n      if (userData != null) { // add our time constraint\n          return res.send(userData);\n      }\n\n      else {\n        createUser(req, res);\n      }\n  });\n}\n \nexport function getUserComments (req, res, callback) {\n  var slices = [];\n  var username = req.params.username;\n  var i = 1;\n\n  reddit('/user/' + username + '/comments/').get({ limit: 100 }).then(function(firstSlice) {\n    if (firstSlice.data.children.length == 0) {\n      return;\n    }\n    slices.push(firstSlice);\n    loop(firstSlice, firstSlice.data.children[firstSlice.data.children.length-1].data.name);\n  });\n\n  function loop(slice, prevComment) {\n    if (slice.data.children.length < 100 || i >= 10) {\n      console.log('Done.\\n');\n      callback(slices);\n      // return res.send(slices);\n      return;\n    }\n    console.log(i + '\\n');\n    i++;\n    reddit('/user/' + username + '/comments/').get({ limit: 100, after: prevComment }).then(function(currentSlice) {\n      if (currentSlice.data.children.length == 0) {\n        // return res.send(slices);\n        return;\n      }\n      slices.push(slice);\n      loop(currentSlice, currentSlice.data.children[currentSlice.data.children.length-1].data.name);\n    });\n  }\n  callback(slices);\n  // return res.send(slices);\n}\n\n  // var children = [];\n\n  // function handleSlice(slice) {\n  //   if (slice.empty) {\n  //     return res.send(children);\n  //   }\n\n  //   // printSlice(slice);\n  //   children = children.concat(slice.children);\n  //   return slice.next().then(handleSlice);\n  // }\n\n  // reddit('/user/' + req.params.username + '/comments/').get({\n  //   limit: 100\n  // }).then(handleSlice);\n\n\n  // var i = 0;\n  // var total = 0;\n\n  // // reddit('/hot').listing({ limit: 100 }).then(loop);\n  // reddit('/user/' + req.params.username + '/comments/').get({ limit: 100 }).then(loop);\n\n  \n\n  //   total += slice.children.length;\n  //   i++\n  //   console.log(i, 'children: ' + slice.children.length, 'total: ' + total);\n  //   return slice.next().then(loop);\n  // }\n\n  //     // return res.send(JSON.stringify(result, null, 4));\n  //     return res.send(result);\n  // });\n\nexport function getTopComment (req, res, callback) {\n      reddit('/user/' + req.params.username + '/comments/').get({\n        limit: 1,\n        sort: 'top'\n      }).then(function(response) {\n        // return res.send(response);\n        var comment = {};\n        comment.score = parseInt(response.data.children[0].data.score);\n        comment.body = response.data.children[0].data.body.toString();\n        comment.subreddit = response.data.children[0].data.subreddit.toString();\n        callback(comment);\n      });\n}\n\nexport function getTopSubmission (req, res, callback) {\n    reddit('/user/' + req.params.username + '/submitted/').get({ /* need to add raw json later */\n        limit: 1,\n        sort: 'top'\n    }).then(function(response) {\n        var submission = {};\n        submission.score = response.data.children[0].data.score;\n        submission.subreddit = response.data.children[0].data.subreddit;\n        submission.title = response.data.children[0].data.title;\n        submission.permalink = 'https://www.reddit.com' + response.data.children[0].data.permalink;\n        callback(submission);\n      });\n}\n\nexport function getNSFWComments (req, res, callback) {\n    \n}\n\nexport function getNSFWSubmissions (req, res, callback) {\n    \n}\n\nexport function getKarmaAndDate (req, res, callback) {\n  reddit('/user/' + req.params.username + '/about/').get().then(function(response) {\n    var details = {};\n    details.comments = parseInt(response.data.comment_karma);\n    details.submissions = parseInt(response.data.link_karma);\n    details.created = parseInt(response.data.created_utc);\n    callback(details);\n    // return res.send(response);\n  });\n}",
			"file": "server/api/reddit/reddit.controller.js",
			"file_size": 7329,
			"file_write_time": 130995596203697754,
			"settings":
			{
				"buffer_size": 7324,
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/api/reddit/index.js",
			"settings":
			{
				"buffer_size": 1025,
				"line_ending": "Unix"
			}
		},
		{
			"file": "server/api/user/user.model.js",
			"settings":
			{
				"buffer_size": 815,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "var mongoose = require('mongoose');\nvar Schema = mongoose.Schema;\n\nvar CommentSchema = new Schema({\n	comments: {\n			score: Number,\n			nsfw: Boolean,\n			body: String,\n			edited: Boolean,\n			subreddit: String,\n			created: Number,\n			upvotes: Number,\n			}\n});\n\nmodule.exports = ('Comment', CommentSchema);",
			"file": "server/api/user/comment.model.js",
			"file_size": 340,
			"file_write_time": 130995388195359775,
			"settings":
			{
				"buffer_size": 302,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 150.0,
		"last_filter": "Package Control:in",
		"selected_items":
		[
			[
				"Package Control:in",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Kanav/Documents/red-reap",
		"/C/Users/Kanav/Documents/red-reap/client",
		"/C/Users/Kanav/Documents/red-reap/client/app",
		"/C/Users/Kanav/Documents/red-reap/client/app/main",
		"/C/Users/Kanav/Documents/red-reap/client/app/u",
		"/C/Users/Kanav/Documents/red-reap/client/bower_components",
		"/C/Users/Kanav/Documents/red-reap/server",
		"/C/Users/Kanav/Documents/red-reap/server/api",
		"/C/Users/Kanav/Documents/red-reap/server/api/reddit",
		"/C/Users/Kanav/Documents/red-reap/server/api/user",
		"/C/Users/Kanav/Documents/red-reap/server/api/validate",
		"/C/Users/Kanav/Documents/red-reap/server/config",
		"/C/Users/Kanav/Documents/red-reap/server/config/environment"
	],
	"file_history":
	[
		"/C/Users/Kanav/Documents/red-reap/server/api/validate/index.js",
		"/C/Users/Kanav/Documents/red-reap/server/api/validate/validate.controller.js",
		"/C/Users/Kanav/Documents/red-reap/server/api/validate/validate.model.js",
		"/C/Program Files (x86)/Steam/steamapps/common/Counter-Strike Global Offensive/csgo/cfg/kanav.cfg",
		"/C/Users/Kanav/Documents/red-reap/server/api/user/user.model.js",
		"/C/Users/Kanav/Documents/red-reap/server/app.js",
		"/C/Users/Kanav/Documents/red-reap/server/config/environment/index.js",
		"/C/Users/Kanav/Documents/red-reap/server/config/environment/production.js",
		"/C/Users/Kanav/Documents/red-reap/server/config/environment/development.js",
		"/C/Users/Kanav/Documents/red-reap/server/api/reddit/index.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/main/main.html",
		"/C/Users/Kanav/Documents/red-reap/client/app/main/mainService.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/main/main.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/main/main.controller.js",
		"/C/Users/Kanav/Documents/red-reap/server/routes.js",
		"/C/Users/Kanav/Documents/red-reap/server/api/user/index.js",
		"/C/Users/Kanav/Documents/red-reap/server/api/user/user.controller.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/u/userRouter.js",
		"/C/Users/Kanav/Documents/red-reap/server/api/reddit/reddit.controller.js",
		"/C/Users/Kanav/Documents/red-reap/server/index.js",
		"/C/Users/Kanav/Downloads/black.swan.(2010).eng.1cd.(4206141)/black.swan.(4206141).nfo",
		"/C/Users/Kanav/Documents/red-reap/client/app/app.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/u/userCtrl.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/u/userService.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/app.constant.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/main/main.scss",
		"/C/Users/Kanav/Desktop/app/app.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/home/homeCtrl.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/app.routes.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/home/homeService.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/main/homeCtrl.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/main/homeService.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/main/mainCtrl.js",
		"/C/Users/Kanav/Documents/red-reap/client/index.html",
		"/C/Users/Kanav/Documents/red-reap/client/components/modal/modal.html",
		"/C/Users/Kanav/Documents/red-reap/client/components/modal/modal.scss",
		"/C/Users/Kanav/Documents/red-reap/client/components/modal/modal.service.js",
		"/C/Users/Kanav/Documents/red-reap/client/components/auth/auth.service.js",
		"/C/Users/Kanav/Documents/red-reap/client/components/navbar/navbar.html",
		"/C/Users/Kanav/Documents/red-reap/client/components/navbar/navbar.controller.js",
		"/C/Users/Kanav/Documents/red-reap/server/user/user.controller.js",
		"/C/Users/Kanav/Documents/red-reap/server/user/user.model.js",
		"/C/Users/Kanav/Documents/red-reap/server/user/index.js",
		"/C/Users/Kanav/Documents/red-reap/client/components/util/util.module.js",
		"/C/Users/Kanav/Documents/red-reap/client/components/util/util.service.js",
		"/C/Users/Kanav/Documents/red-reap/client/components/navbar/navbar.directive.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/admin/admin.controller.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/admin/admin.html",
		"/C/Users/Kanav/Documents/red-reap/client/app/admin/admin.module.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/admin/admin.router.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/admin/admin.scss",
		"/C/Users/Kanav/Documents/red-reap/server/config/local.env.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/main/main.controller.spec.js",
		"/C/Users/Kanav/Documents/red-reap/client/components/auth/auth.module.js",
		"/C/Users/Kanav/Documents/red-reap/client/components/mongoose-error/mongoose-error.directive.js",
		"/C/Users/Kanav/Documents/red-reap/client/robots.txt",
		"/C/Users/Kanav/Documents/red-reap/client/app/u/user.html",
		"/C/Users/Kanav/Documents/red-reap/client/app/account/account.js",
		"/C/Users/Kanav/Documents/red-reap/server/auth/auth.service.js",
		"/C/Users/Kanav/Documents/red-reap/server/api/reddit/reddit.model.js",
		"/C/Users/Kanav/Documents/red-reap/server/api/user/user.events.js",
		"/C/Users/Kanav/Documents/red-reap/server/api/user/index.spec.js",
		"/C/Users/Kanav/Documents/red-reap/server/api/reddit/index.spec.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/u/top.html",
		"/C/Users/Kanav/Documents/red-reap/e2e/main/main.spec.js",
		"/C/Users/Kanav/Documents/red-reap/e2e/main/main.po.js",
		"/C/Users/Kanav/Downloads/ferristic",
		"/C/Users/Kanav/Desktop/backupcon.js",
		"/C/Users/Kanav/Documents/red-reap/.gitignore",
		"/C/Users/Kanav/Documents/snootest/snoocore-examples/oauth/oauth-explicit-permanent-1.js",
		"/C/Users/Kanav/Downloads/red-reap/server/app.js",
		"/C/Users/Kanav/Documents/snootest/snoocore-examples/express-web/app.js",
		"/C/Users/Kanav/Documents/red-reap/server/api/redditauth/index.js",
		"/C/Users/Kanav/Documents/red-reap/server/api/redditauth/redditauth.controller.js",
		"/C/Users/Kanav/Documents/Projects/mean-machine-code-master/17-user-crm/server.js",
		"/C/Users/Kanav/Documents/red-reap/server/api/redditauth/redditauth.model.js",
		"/C/Users/Kanav/Documents/red-reap/server/auth/index.js",
		"/C/Users/Kanav/Documents/red-reap/.tmp/app/main/main.js",
		"/C/Users/Kanav/Documents/red-reap/client/app/app.scss",
		"/C/Users/Kanav/Documents/redreap/client/app/main/main.html",
		"/C/Users/Kanav/Documents/redreap/client/index.html",
		"/C/Users/Kanav/Downloads/mean-machine-code-master/11-angular-start/js/app.js",
		"/C/Users/Kanav/Documents/Projects/hearthbase/server/config/local.env.js",
		"/C/Users/Kanav/Documents/Projects/hearthbase/server/config/local.env.sample.js",
		"/C/Users/Kanav/Documents/Projects/workflow/server.js",
		"/C/Users/Kanav/Documents/Projects/workflow/public/app/controllers/mainCtrl.js",
		"/C/Users/Kanav/Documents/Projects/workflow/public/app/views/index.html",
		"/C/Users/Kanav/Documents/Projects/workflow/gulpfile.js",
		"/C/Users/Kanav/Documents/Projects/workflow/.bowerrc",
		"/C/Users/Kanav/Documents/Projects/workflow/public/app/app.js",
		"/C/Users/Kanav/Documents/Projects/workflow/public/app/app.routes.js",
		"/C/Users/Kanav/Documents/Projects/workflow/public/assets/css/style.less",
		"/C/Users/Kanav/Documents/Projects/hearthbase/package.json",
		"/C/Users/Kanav/Documents/Projects/hearthbase/.gitattributes",
		"/C/Users/Kanav/Documents/Projects/hearthbase/.buildignore",
		"/C/Users/Kanav/Documents/Projects/hearthbase/.bowerrc",
		"/C/Users/Kanav/Documents/Projects/hearthbase/.gitignore",
		"/C/Users/Kanav/Downloads/The.Witness-HI2U/hi2u.nfo",
		"/C/Users/Kanav/Documents/Projects/workflow/package.json",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/controllers/userCtrl.js",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/views/pages/login.html",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/app.js",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/views/pages/users/all.html",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/app.routes.js",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/views/pages/users/single.html",
		"/C/Users/Kanav/Downloads/mean-machine-code-master/mean-machine-code-master/17-user-crm/public/app/views/pages/users/single.html",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/assets/css/style.css",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/controllers/mainCtrl.js",
		"/C/Users/Kanav/Documents/Projects/sample-org/app/routes/api.js",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/views/index.html",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/views/pages/home.html",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/services/authService.js",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/views/home.html",
		"/C/Users/Kanav/Downloads/mean-machine-code-master/mean-machine-code-master/17-user-crm/public/app/views/pages/home.html",
		"/C/Users/Kanav/Downloads/mean-machine-code-master/mean-machine-code-master/17-user-crm/public/app/views/index.html",
		"/C/Users/Kanav/Downloads/mean-machine-code-master/mean-machine-code-master/17-user-crm/public/app/controllers/mainCtrl.js",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/index.html",
		"/C/Users/Kanav/Documents/Projects/sample-org/package.json",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/views/login.html",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/controllers/userController.js",
		"/C/Users/Kanav/Documents/Projects/sample-org/config.js",
		"/C/Users/Kanav/Documents/Projects/sample-org/server.js",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/services/userService.js",
		"/C/Users/Kanav/Documents/Projects/sample-org/public/app/controllers/authService.js",
		"/C/Users/Kanav/Documents/Projects/sample-org/app/models/user.js",
		"/C/Users/Kanav/AppData/Local/Microsoft/Windows/INetCache/IE/SLTVGW8Y/.config[1].config",
		"/C/Users/Kanav/Documents/Projects/sample-orga/app/models/user.js",
		"/C/Users/Kanav/Documents/Projects/api-intro/package.json"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"topComment",
			"comments",
			"zoom_sensitivity",
			"ng-scope",
			"main.html",
			"ng-controller",
			"userFactory",
			"config",
			"redditauth",
			"forcepreload",
			"app",
			"messagemode2",
			"alias",
			"hostpath",
			"con_filter_text",
			"damage",
			"con_filter_text",
			"f1",
			"sv_voicee",
			"8",
			"bind 8",
			"sm_deadtalk",
			"voting",
			"Commands",
			"playercmds",
			"sm_admin",
			"friendlyfire",
			"cl_rightnhad",
			"cl_righthand",
			"bind p",
			"rate",
			"sm_cvar",
			"sv_damage_",
			"GREENS CHECKS",
			"RICHIE SAVES",
			"JOHN & ASHTON",
			"passengersBravo",
			"passengersAlfa"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"mainFactory",
			"validate",
			"ASHTON CHECKS",
			"XERI SAVES",
			"AJ & PRAB",
			"bravoPartyNames",
			"alfaPartyNames"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "server/api/reddit/reddit.controller.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7324,
						"regions":
						{
						},
						"selection":
						[
							[
								2977,
								2977
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 221.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "server/api/reddit/index.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1025,
						"regions":
						{
						},
						"selection":
						[
							[
								1025,
								1025
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "server/api/user/user.model.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 815,
						"regions":
						{
						},
						"selection":
						[
							[
								685,
								685
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "server/api/user/comment.model.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 302,
						"regions":
						{
						},
						"selection":
						[
							[
								252,
								252
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 29.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.580444960104,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "red_reap.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 236.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
